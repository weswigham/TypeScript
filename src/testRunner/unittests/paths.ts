import { normalizeSlashes, getRootLength, isUrl, isRootedDiskPath, getDirectoryPath, getBaseFileName, getAnyExtensionFromPath, getPathComponents, reducePathComponents, combinePaths, resolvePath, getRelativePathFromDirectory, toFileNameLowerCase } from "../ts";
describe("unittests:: core paths", () => {
    it("normalizeSlashes", () => {
        assert.strictEqual(normalizeSlashes("a"), "a");
        assert.strictEqual(normalizeSlashes("a/b"), "a/b");
        assert.strictEqual(normalizeSlashes("a\\b"), "a/b");
        assert.strictEqual(normalizeSlashes("\\\\server\\path"), "//server/path");
    });
    it("getRootLength", () => {
        assert.strictEqual(getRootLength("a"), 0);
        assert.strictEqual(getRootLength("/"), 1);
        assert.strictEqual(getRootLength("/path"), 1);
        assert.strictEqual(getRootLength("c:"), 2);
        assert.strictEqual(getRootLength("c:d"), 0);
        assert.strictEqual(getRootLength("c:/"), 3);
        assert.strictEqual(getRootLength("c:\\"), 3);
        assert.strictEqual(getRootLength("//server"), 8);
        assert.strictEqual(getRootLength("//server/share"), 9);
        assert.strictEqual(getRootLength("\\\\server"), 8);
        assert.strictEqual(getRootLength("\\\\server\\share"), 9);
        assert.strictEqual(getRootLength("file:///"), 8);
        assert.strictEqual(getRootLength("file:///path"), 8);
        assert.strictEqual(getRootLength("file:///c:"), 10);
        assert.strictEqual(getRootLength("file:///c:d"), 8);
        assert.strictEqual(getRootLength("file:///c:/path"), 11);
        assert.strictEqual(getRootLength("file:///c%3a"), 12);
        assert.strictEqual(getRootLength("file:///c%3ad"), 8);
        assert.strictEqual(getRootLength("file:///c%3a/path"), 13);
        assert.strictEqual(getRootLength("file:///c%3A"), 12);
        assert.strictEqual(getRootLength("file:///c%3Ad"), 8);
        assert.strictEqual(getRootLength("file:///c%3A/path"), 13);
        assert.strictEqual(getRootLength("file://localhost"), 16);
        assert.strictEqual(getRootLength("file://localhost/"), 17);
        assert.strictEqual(getRootLength("file://localhost/path"), 17);
        assert.strictEqual(getRootLength("file://localhost/c:"), 19);
        assert.strictEqual(getRootLength("file://localhost/c:d"), 17);
        assert.strictEqual(getRootLength("file://localhost/c:/path"), 20);
        assert.strictEqual(getRootLength("file://localhost/c%3a"), 21);
        assert.strictEqual(getRootLength("file://localhost/c%3ad"), 17);
        assert.strictEqual(getRootLength("file://localhost/c%3a/path"), 22);
        assert.strictEqual(getRootLength("file://localhost/c%3A"), 21);
        assert.strictEqual(getRootLength("file://localhost/c%3Ad"), 17);
        assert.strictEqual(getRootLength("file://localhost/c%3A/path"), 22);
        assert.strictEqual(getRootLength("file://server"), 13);
        assert.strictEqual(getRootLength("file://server/"), 14);
        assert.strictEqual(getRootLength("file://server/path"), 14);
        assert.strictEqual(getRootLength("file://server/c:"), 14);
        assert.strictEqual(getRootLength("file://server/c:d"), 14);
        assert.strictEqual(getRootLength("file://server/c:/d"), 14);
        assert.strictEqual(getRootLength("file://server/c%3a"), 14);
        assert.strictEqual(getRootLength("file://server/c%3ad"), 14);
        assert.strictEqual(getRootLength("file://server/c%3a/d"), 14);
        assert.strictEqual(getRootLength("file://server/c%3A"), 14);
        assert.strictEqual(getRootLength("file://server/c%3Ad"), 14);
        assert.strictEqual(getRootLength("file://server/c%3A/d"), 14);
        assert.strictEqual(getRootLength("http://server"), 13);
        assert.strictEqual(getRootLength("http://server/path"), 14);
    });
    it("isUrl", () => {
        assert.isFalse(isUrl("a"));
        assert.isFalse(isUrl("/"));
        assert.isFalse(isUrl("c:"));
        assert.isFalse(isUrl("c:d"));
        assert.isFalse(isUrl("c:/"));
        assert.isFalse(isUrl("c:\\"));
        assert.isFalse(isUrl("//server"));
        assert.isFalse(isUrl("//server/share"));
        assert.isFalse(isUrl("\\\\server"));
        assert.isFalse(isUrl("\\\\server\\share"));
        assert.isTrue(isUrl("file:///path"));
        assert.isTrue(isUrl("file:///c:"));
        assert.isTrue(isUrl("file:///c:d"));
        assert.isTrue(isUrl("file:///c:/path"));
        assert.isTrue(isUrl("file://server"));
        assert.isTrue(isUrl("file://server/path"));
        assert.isTrue(isUrl("http://server"));
        assert.isTrue(isUrl("http://server/path"));
    });
    it("isRootedDiskPath", () => {
        assert.isFalse(isRootedDiskPath("a"));
        assert.isTrue(isRootedDiskPath("/"));
        assert.isTrue(isRootedDiskPath("c:"));
        assert.isFalse(isRootedDiskPath("c:d"));
        assert.isTrue(isRootedDiskPath("c:/"));
        assert.isTrue(isRootedDiskPath("c:\\"));
        assert.isTrue(isRootedDiskPath("//server"));
        assert.isTrue(isRootedDiskPath("//server/share"));
        assert.isTrue(isRootedDiskPath("\\\\server"));
        assert.isTrue(isRootedDiskPath("\\\\server\\share"));
        assert.isFalse(isRootedDiskPath("file:///path"));
        assert.isFalse(isRootedDiskPath("file:///c:"));
        assert.isFalse(isRootedDiskPath("file:///c:d"));
        assert.isFalse(isRootedDiskPath("file:///c:/path"));
        assert.isFalse(isRootedDiskPath("file://server"));
        assert.isFalse(isRootedDiskPath("file://server/path"));
        assert.isFalse(isRootedDiskPath("http://server"));
        assert.isFalse(isRootedDiskPath("http://server/path"));
    });
    it("getDirectoryPath", () => {
        assert.strictEqual(getDirectoryPath(""), "");
        assert.strictEqual(getDirectoryPath("a"), "");
        assert.strictEqual(getDirectoryPath("a/b"), "a");
        assert.strictEqual(getDirectoryPath("/"), "/");
        assert.strictEqual(getDirectoryPath("/a"), "/");
        assert.strictEqual(getDirectoryPath("/a/"), "/");
        assert.strictEqual(getDirectoryPath("/a/b"), "/a");
        assert.strictEqual(getDirectoryPath("/a/b/"), "/a");
        assert.strictEqual(getDirectoryPath("c:"), "c:");
        assert.strictEqual(getDirectoryPath("c:d"), "");
        assert.strictEqual(getDirectoryPath("c:/"), "c:/");
        assert.strictEqual(getDirectoryPath("c:/path"), "c:/");
        assert.strictEqual(getDirectoryPath("c:/path/"), "c:/");
        assert.strictEqual(getDirectoryPath("//server"), "//server");
        assert.strictEqual(getDirectoryPath("//server/"), "//server/");
        assert.strictEqual(getDirectoryPath("//server/share"), "//server/");
        assert.strictEqual(getDirectoryPath("//server/share/"), "//server/");
        assert.strictEqual(getDirectoryPath("\\\\server"), "//server");
        assert.strictEqual(getDirectoryPath("\\\\server\\"), "//server/");
        assert.strictEqual(getDirectoryPath("\\\\server\\share"), "//server/");
        assert.strictEqual(getDirectoryPath("\\\\server\\share\\"), "//server/");
        assert.strictEqual(getDirectoryPath("file:///"), "file:///");
        assert.strictEqual(getDirectoryPath("file:///path"), "file:///");
        assert.strictEqual(getDirectoryPath("file:///path/"), "file:///");
        assert.strictEqual(getDirectoryPath("file:///c:"), "file:///c:");
        assert.strictEqual(getDirectoryPath("file:///c:d"), "file:///");
        assert.strictEqual(getDirectoryPath("file:///c:/"), "file:///c:/");
        assert.strictEqual(getDirectoryPath("file:///c:/path"), "file:///c:/");
        assert.strictEqual(getDirectoryPath("file:///c:/path/"), "file:///c:/");
        assert.strictEqual(getDirectoryPath("file://server"), "file://server");
        assert.strictEqual(getDirectoryPath("file://server/"), "file://server/");
        assert.strictEqual(getDirectoryPath("file://server/path"), "file://server/");
        assert.strictEqual(getDirectoryPath("file://server/path/"), "file://server/");
        assert.strictEqual(getDirectoryPath("http://server"), "http://server");
        assert.strictEqual(getDirectoryPath("http://server/"), "http://server/");
        assert.strictEqual(getDirectoryPath("http://server/path"), "http://server/");
        assert.strictEqual(getDirectoryPath("http://server/path/"), "http://server/");
    });
    it("getBaseFileName", () => {
        assert.strictEqual(getBaseFileName(""), "");
        assert.strictEqual(getBaseFileName("a"), "a");
        assert.strictEqual(getBaseFileName("a/"), "a");
        assert.strictEqual(getBaseFileName("/"), "");
        assert.strictEqual(getBaseFileName("/a"), "a");
        assert.strictEqual(getBaseFileName("/a/"), "a");
        assert.strictEqual(getBaseFileName("/a/b"), "b");
        assert.strictEqual(getBaseFileName("c:"), "");
        assert.strictEqual(getBaseFileName("c:d"), "c:d");
        assert.strictEqual(getBaseFileName("c:/"), "");
        assert.strictEqual(getBaseFileName("c:\\"), "");
        assert.strictEqual(getBaseFileName("c:/path"), "path");
        assert.strictEqual(getBaseFileName("c:/path/"), "path");
        assert.strictEqual(getBaseFileName("//server"), "");
        assert.strictEqual(getBaseFileName("//server/"), "");
        assert.strictEqual(getBaseFileName("//server/share"), "share");
        assert.strictEqual(getBaseFileName("//server/share/"), "share");
        assert.strictEqual(getBaseFileName("file:///"), "");
        assert.strictEqual(getBaseFileName("file:///path"), "path");
        assert.strictEqual(getBaseFileName("file:///path/"), "path");
        assert.strictEqual(getBaseFileName("file:///c:"), "");
        assert.strictEqual(getBaseFileName("file:///c:/"), "");
        assert.strictEqual(getBaseFileName("file:///c:d"), "c:d");
        assert.strictEqual(getBaseFileName("file:///c:/d"), "d");
        assert.strictEqual(getBaseFileName("file:///c:/d/"), "d");
        assert.strictEqual(getBaseFileName("http://server"), "");
        assert.strictEqual(getBaseFileName("http://server/"), "");
        assert.strictEqual(getBaseFileName("http://server/a"), "a");
        assert.strictEqual(getBaseFileName("http://server/a/"), "a");
        assert.strictEqual(getBaseFileName("/path/a.ext", ".ext", /*ignoreCase*/ false), "a");
        assert.strictEqual(getBaseFileName("/path/a.ext", ".EXT", /*ignoreCase*/ true), "a");
        assert.strictEqual(getBaseFileName("/path/a.ext", "ext", /*ignoreCase*/ false), "a");
        assert.strictEqual(getBaseFileName("/path/a.b", ".ext", /*ignoreCase*/ false), "a.b");
        assert.strictEqual(getBaseFileName("/path/a.b", [".b", ".c"], /*ignoreCase*/ false), "a");
        assert.strictEqual(getBaseFileName("/path/a.c", [".b", ".c"], /*ignoreCase*/ false), "a");
        assert.strictEqual(getBaseFileName("/path/a.d", [".b", ".c"], /*ignoreCase*/ false), "a.d");
    });
    it("getAnyExtensionFromPath", () => {
        assert.strictEqual(getAnyExtensionFromPath(""), "");
        assert.strictEqual(getAnyExtensionFromPath(".ext"), ".ext");
        assert.strictEqual(getAnyExtensionFromPath("a.ext"), ".ext");
        assert.strictEqual(getAnyExtensionFromPath("/a.ext"), ".ext");
        assert.strictEqual(getAnyExtensionFromPath("a.ext/"), ".ext");
        assert.strictEqual(getAnyExtensionFromPath("a.ext", ".ext", /*ignoreCase*/ false), ".ext");
        assert.strictEqual(getAnyExtensionFromPath("a.ext", ".EXT", /*ignoreCase*/ true), ".ext");
        assert.strictEqual(getAnyExtensionFromPath("a.ext", "ext", /*ignoreCase*/ false), ".ext");
        assert.strictEqual(getAnyExtensionFromPath("a.b", ".ext", /*ignoreCase*/ false), "");
        assert.strictEqual(getAnyExtensionFromPath("a.b", [".b", ".c"], /*ignoreCase*/ false), ".b");
        assert.strictEqual(getAnyExtensionFromPath("a.c", [".b", ".c"], /*ignoreCase*/ false), ".c");
        assert.strictEqual(getAnyExtensionFromPath("a.d", [".b", ".c"], /*ignoreCase*/ false), "");
    });
    it("getPathComponents", () => {
        assert.deepEqual(getPathComponents(""), [""]);
        assert.deepEqual(getPathComponents("a"), ["", "a"]);
        assert.deepEqual(getPathComponents("./a"), ["", ".", "a"]);
        assert.deepEqual(getPathComponents("/"), ["/"]);
        assert.deepEqual(getPathComponents("/a"), ["/", "a"]);
        assert.deepEqual(getPathComponents("/a/"), ["/", "a"]);
        assert.deepEqual(getPathComponents("c:"), ["c:"]);
        assert.deepEqual(getPathComponents("c:d"), ["", "c:d"]);
        assert.deepEqual(getPathComponents("c:/"), ["c:/"]);
        assert.deepEqual(getPathComponents("c:/path"), ["c:/", "path"]);
        assert.deepEqual(getPathComponents("//server"), ["//server"]);
        assert.deepEqual(getPathComponents("//server/"), ["//server/"]);
        assert.deepEqual(getPathComponents("//server/share"), ["//server/", "share"]);
        assert.deepEqual(getPathComponents("file:///"), ["file:///"]);
        assert.deepEqual(getPathComponents("file:///path"), ["file:///", "path"]);
        assert.deepEqual(getPathComponents("file:///c:"), ["file:///c:"]);
        assert.deepEqual(getPathComponents("file:///c:d"), ["file:///", "c:d"]);
        assert.deepEqual(getPathComponents("file:///c:/"), ["file:///c:/"]);
        assert.deepEqual(getPathComponents("file:///c:/path"), ["file:///c:/", "path"]);
        assert.deepEqual(getPathComponents("file://server"), ["file://server"]);
        assert.deepEqual(getPathComponents("file://server/"), ["file://server/"]);
        assert.deepEqual(getPathComponents("file://server/path"), ["file://server/", "path"]);
        assert.deepEqual(getPathComponents("http://server"), ["http://server"]);
        assert.deepEqual(getPathComponents("http://server/"), ["http://server/"]);
        assert.deepEqual(getPathComponents("http://server/path"), ["http://server/", "path"]);
    });
    it("reducePathComponents", () => {
        assert.deepEqual(reducePathComponents([]), []);
        assert.deepEqual(reducePathComponents([""]), [""]);
        assert.deepEqual(reducePathComponents(["", "."]), [""]);
        assert.deepEqual(reducePathComponents(["", ".", "a"]), ["", "a"]);
        assert.deepEqual(reducePathComponents(["", "a", "."]), ["", "a"]);
        assert.deepEqual(reducePathComponents(["", ".."]), ["", ".."]);
        assert.deepEqual(reducePathComponents(["", "..", ".."]), ["", "..", ".."]);
        assert.deepEqual(reducePathComponents(["", "..", ".", ".."]), ["", "..", ".."]);
        assert.deepEqual(reducePathComponents(["", "a", ".."]), [""]);
        assert.deepEqual(reducePathComponents(["", "..", "a"]), ["", "..", "a"]);
        assert.deepEqual(reducePathComponents(["/"]), ["/"]);
        assert.deepEqual(reducePathComponents(["/", "."]), ["/"]);
        assert.deepEqual(reducePathComponents(["/", ".."]), ["/"]);
        assert.deepEqual(reducePathComponents(["/", "a", ".."]), ["/"]);
    });
    it("combinePaths", () => {
        assert.strictEqual(combinePaths("/", "/node_modules/@types"), "/node_modules/@types");
        assert.strictEqual(combinePaths("/a/..", ""), "/a/..");
        assert.strictEqual(combinePaths("/a/..", "b"), "/a/../b");
        assert.strictEqual(combinePaths("/a/..", "b/"), "/a/../b/");
        assert.strictEqual(combinePaths("/a/..", "/"), "/");
        assert.strictEqual(combinePaths("/a/..", "/b"), "/b");
    });
    it("resolvePath", () => {
        assert.strictEqual(resolvePath(""), "");
        assert.strictEqual(resolvePath("."), "");
        assert.strictEqual(resolvePath("./"), "");
        assert.strictEqual(resolvePath(".."), "..");
        assert.strictEqual(resolvePath("../"), "../");
        assert.strictEqual(resolvePath("/"), "/");
        assert.strictEqual(resolvePath("/."), "/");
        assert.strictEqual(resolvePath("/./"), "/");
        assert.strictEqual(resolvePath("/../"), "/");
        assert.strictEqual(resolvePath("/a"), "/a");
        assert.strictEqual(resolvePath("/a/"), "/a/");
        assert.strictEqual(resolvePath("/a/."), "/a");
        assert.strictEqual(resolvePath("/a/./"), "/a/");
        assert.strictEqual(resolvePath("/a/./b"), "/a/b");
        assert.strictEqual(resolvePath("/a/./b/"), "/a/b/");
        assert.strictEqual(resolvePath("/a/.."), "/");
        assert.strictEqual(resolvePath("/a/../"), "/");
        assert.strictEqual(resolvePath("/a/../b"), "/b");
        assert.strictEqual(resolvePath("/a/../b/"), "/b/");
        assert.strictEqual(resolvePath("/a/..", "b"), "/b");
        assert.strictEqual(resolvePath("/a/..", "/"), "/");
        assert.strictEqual(resolvePath("/a/..", "b/"), "/b/");
        assert.strictEqual(resolvePath("/a/..", "/b"), "/b");
        assert.strictEqual(resolvePath("/a/.", "b"), "/a/b");
        assert.strictEqual(resolvePath("/a/.", "."), "/a");
        assert.strictEqual(resolvePath("a", "b", "c"), "a/b/c");
        assert.strictEqual(resolvePath("a", "b", "/c"), "/c");
        assert.strictEqual(resolvePath("a", "b", "../c"), "a/c");
    });
    it("getPathRelativeTo", () => {
        assert.strictEqual(getRelativePathFromDirectory("/", "/", /*ignoreCase*/ false), "");
        assert.strictEqual(getRelativePathFromDirectory("/a", "/a", /*ignoreCase*/ false), "");
        assert.strictEqual(getRelativePathFromDirectory("/a/", "/a", /*ignoreCase*/ false), "");
        assert.strictEqual(getRelativePathFromDirectory("/a", "/", /*ignoreCase*/ false), "..");
        assert.strictEqual(getRelativePathFromDirectory("/a", "/b", /*ignoreCase*/ false), "../b");
        assert.strictEqual(getRelativePathFromDirectory("/a/b", "/b", /*ignoreCase*/ false), "../../b");
        assert.strictEqual(getRelativePathFromDirectory("/a/b/c", "/b", /*ignoreCase*/ false), "../../../b");
        assert.strictEqual(getRelativePathFromDirectory("/a/b/c", "/b/c", /*ignoreCase*/ false), "../../../b/c");
        assert.strictEqual(getRelativePathFromDirectory("/a/b/c", "/a/b", /*ignoreCase*/ false), "..");
        assert.strictEqual(getRelativePathFromDirectory("c:", "d:", /*ignoreCase*/ false), "d:/");
        assert.strictEqual(getRelativePathFromDirectory("file:///", "file:///", /*ignoreCase*/ false), "");
        assert.strictEqual(getRelativePathFromDirectory("file:///a", "file:///a", /*ignoreCase*/ false), "");
        assert.strictEqual(getRelativePathFromDirectory("file:///a/", "file:///a", /*ignoreCase*/ false), "");
        assert.strictEqual(getRelativePathFromDirectory("file:///a", "file:///", /*ignoreCase*/ false), "..");
        assert.strictEqual(getRelativePathFromDirectory("file:///a", "file:///b", /*ignoreCase*/ false), "../b");
        assert.strictEqual(getRelativePathFromDirectory("file:///a/b", "file:///b", /*ignoreCase*/ false), "../../b");
        assert.strictEqual(getRelativePathFromDirectory("file:///a/b/c", "file:///b", /*ignoreCase*/ false), "../../../b");
        assert.strictEqual(getRelativePathFromDirectory("file:///a/b/c", "file:///b/c", /*ignoreCase*/ false), "../../../b/c");
        assert.strictEqual(getRelativePathFromDirectory("file:///a/b/c", "file:///a/b", /*ignoreCase*/ false), "..");
        assert.strictEqual(getRelativePathFromDirectory("file:///c:", "file:///d:", /*ignoreCase*/ false), "file:///d:/");
    });
    it("toFileNameLowerCase", () => {
        assert.strictEqual(toFileNameLowerCase("/user/UserName/projects/Project/file.ts"), "/user/username/projects/project/file.ts");
        assert.strictEqual(toFileNameLowerCase("/user/UserName/projects/projectß/file.ts"), "/user/username/projects/projectß/file.ts");
        assert.strictEqual(toFileNameLowerCase("/user/UserName/projects/İproject/file.ts"), "/user/username/projects/İproject/file.ts");
        assert.strictEqual(toFileNameLowerCase("/user/UserName/projects/ı/file.ts"), "/user/username/projects/ı/file.ts");
    });
});
