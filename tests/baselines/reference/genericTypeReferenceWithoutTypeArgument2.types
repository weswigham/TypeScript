=== tests/cases/conformance/types/specifyingTypes/typeReferences/genericTypeReferenceWithoutTypeArgument2.ts ===
// it is an error to use a generic type without type arguments
// all of these are errors 

interface I<T> {
>I : I<T>
>T : T

    foo: T;
>foo : T
>T : T
}

var c: I;
>c : I<{}>
>I : I<T>

var a: { x: I };
>a : { x: I<{}>; }
>x : I<{}>
>I : I<T>

var b: { (x: I): I };
>b : (x: I<{}>) => I<{}>
>x : I<{}>
>I : I<T>
>I : I<T>

var d: { [x: I]: I };
>d : {}
>x : I<{}>
>I : I<T>
>I : I<T>

var e = (x: I) => { var y: I; return y; }
>e : (x: I<{}>) => I<{}>
>(x: I) => { var y: I; return y; } : (x: I<{}>) => I<{}>
>x : I<{}>
>I : I<T>
>y : I<{}>
>I : I<T>
>y : I<{}>

function f(x: I): I { var y: I; return y; }
>f : (x: I<{}>) => I<{}>
>x : I<{}>
>I : I<T>
>I : I<T>
>y : I<{}>
>I : I<T>
>y : I<{}>

var g = function f(x: I): I { var y: I; return y; }
>g : (x: I<{}>) => I<{}>
>function f(x: I): I { var y: I; return y; } : (x: I<{}>) => I<{}>
>f : (x: I<{}>) => I<{}>
>x : I<{}>
>I : I<T>
>I : I<T>
>y : I<{}>
>I : I<T>
>y : I<{}>

class D extends I {
>D : D
>I : any
}

interface U extends I {}
>U : U
>I : I<T>

module M {
>M : any

    export interface E<T> { foo: T }
>E : E<T>
>T : T
>foo : T
>T : T
}

class D2 extends M.C { }
>D2 : D2
>M.C : any
>M : any
>C : any

interface D3<T extends M.E> { }
>D3 : D3<T>
>T : T
>M : any
>E : M.E<T>

interface I2 extends M.C { }
>I2 : I2
>M.C : any
>M : any
>C : No type information available!

function h<T extends I>(x: T) { }
>h : <T extends I<{}>>(x: T) => void
>T : T
>I : I<T>
>x : T
>T : T

function i<T extends M.E>(x: T) { }
>i : <T extends M.E<{}>>(x: T) => void
>T : T
>M : any
>E : M.E<T>
>x : T
>T : T

var j = <C>null;
>j : any
><C>null : any
>C : No type information available!
>null : null

var k = <M.E>null;
>k : M.E<{}>
><M.E>null : M.E<{}>
>M : any
>E : M.E<T>
>null : null

