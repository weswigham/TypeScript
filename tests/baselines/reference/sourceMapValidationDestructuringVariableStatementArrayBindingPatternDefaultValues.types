=== tests/cases/compiler/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues.ts ===
declare var console: {
>console : { log(msg: string): void; }

    log(msg: string): void;
>log : (msg: string) => void
>msg : string
}
type Robot = [number, string, string];
>Robot : [number, string, string]

var robotA: Robot = [1, "mower", "mowing"];
>robotA : [number, string, string]
>Robot : [number, string, string]
>[1, "mower", "mowing"] : [1, "mower", "mowing"]
>1 : 1
>"mower" : "mower"
>"mowing" : "mowing"

var robotB: Robot = [2, "trimmer", "trimming"];
>robotB : [number, string, string]
>Robot : [number, string, string]
>[2, "trimmer", "trimming"] : [2, "trimmer", "trimming"]
>2 : 2
>"trimmer" : "trimmer"
>"trimming" : "trimming"

let [, nameA = "noName"] = robotA;
> : undefined
>nameA : string
>"noName" : "noName"
>robotA : [number, string, string]

let [numberB = -1] = robotB;
>numberB : number
>-1 : -1
>1 : 1
>robotB : [number, string, string]

let [numberA2 = -1, nameA2 = "noName", skillA2 = "noSkill"] = robotA;
>numberA2 : number
>-1 : -1
>1 : 1
>nameA2 : string
>"noName" : "noName"
>skillA2 : string
>"noSkill" : "noSkill"
>robotA : [number, string, string]

let [numberC2 = -1] = [3, "edging", "Trimming edges"];
>numberC2 : -1 | 3
>-1 : -1
>1 : 1
>[3, "edging", "Trimming edges"] : [3, string, string]
>3 : 3
>"edging" : "edging"
>"Trimming edges" : "Trimming edges"

let [numberC = -1, nameC = "noName", skillC = "noSkill"] = [3, "edging", "Trimming edges"];
>numberC : -1 | 3
>-1 : -1
>1 : 1
>nameC : "noName" | "edging"
>"noName" : "noName"
>skillC : "noSkill" | "Trimming edges"
>"noSkill" : "noSkill"
>[3, "edging", "Trimming edges"] : [3, "edging", "Trimming edges"]
>3 : 3
>"edging" : "edging"
>"Trimming edges" : "Trimming edges"

let [numberA3 = -1, ...robotAInfo] = robotA;
>numberA3 : number
>-1 : -1
>1 : 1
>robotAInfo : (string | number)[]
>robotA : [number, string, string]

if (nameA == nameA2) {
>nameA == nameA2 : boolean
>nameA : string
>nameA2 : string

    console.log(skillA2);
>console.log(skillA2) : void
>console.log : (msg: string) => void
>console : { log(msg: string): void; }
>log : (msg: string) => void
>skillA2 : string
}
