=== tests/cases/compiler/func.ts ===
interface ComponentOptions<V> {
>ComponentOptions : ComponentOptions<V>
>V : V

    watch: Record<string, WatchHandler<any>>;
>watch : Record<string, WatchHandler<any>>
>Record : Record<K, T>
>WatchHandler : WatchHandler<T>
}
type WatchHandler<T> = (val: T) => void;
>WatchHandler : WatchHandler<T>
>T : T
>val : T
>T : T

declare function extend(options: ComponentOptions<{}>): void;
>extend : (options: ComponentOptions<{}>) => void
>options : ComponentOptions<{}>
>ComponentOptions : ComponentOptions<V>

export var vextend = extend;
>vextend : (options: ComponentOptions<{}>) => void
>extend : (options: ComponentOptions<{}>) => void

=== tests/cases/compiler/app.js ===
import {vextend} from './func';
>vextend : (options: ComponentOptions<{}>) => void

// hover on vextend
export var a = vextend({
>a : void
>vextend({  watch: {    data1(val) {      this.data2 = 1;    },    data2(val) { },  }}) : void
>vextend : (options: ComponentOptions<{}>) => void
>{  watch: {    data1(val) {      this.data2 = 1;    },    data2(val) { },  }} : { watch: { data1(val: any): void; }; }

  watch: {
>watch : { data1(val: any): void; }
>{    data1(val) {      this.data2 = 1;    },    data2(val) { },  } : { data1(val: any): void; }

    data1(val) {
>data1 : (val: any) => void
>val : any

      this.data2 = 1;
>this.data2 = 1 : 1
>this.data2 : (val: any) => void
>this : Record<string, (val: any) => void>
>data2 : (val: any) => void
>1 : 1

    },
    data2(val) { },
>data2 : any
>val : any
  }
});
